def traverse(d,r,m,n):
    if d == m-1 and r == n-1:
        return 1
    if d == m:
        return 0
    if r == n:
        return 0
    
    return traverse(d+1,r,m,n)+traverse(d,r+1,m,n)
    
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        grid=[[0 for i in range(m)] for j in range(n)]
        i=0
        j=0
        print(grid)
        op=traverse(i,j,m,n)
        return op
        
##############################################################33


def traverse(d,r,m,n,grid):
    
    if d == m-1 and r == n-1:
        return 1
    if d == m or r==n:
        return 0 
    if grid[d][r]!=-1:
        return grid[d][r]
    
    grid[d][r] = traverse(d+1,r,m,n,grid)+traverse(d,r+1,m,n,grid)
    return grid[d][r]
    
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        grid=[[-1 for i in range(n)] for j in range(m)]
        i=0
        j=0
        op=traverse(i,j,m,n,grid)
        if m==1 and n==1:
            return op
        return grid[0][0]
        
        
####################################################################


def fact(n):
    p=1
    for i in range(1,n+1):
        p=p*i
    return p

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        return fact(m+n-2)//(fact(n-1)*fact(m-1))
        
